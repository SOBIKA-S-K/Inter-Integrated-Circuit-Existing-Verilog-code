# slave HDL Code 
module i2c_slave (
    input wire clk,
    input wire rst,
    input wire [6:0] my_addr,
    input wire scl,
    inout wire sda,
    output reg [7:0] data_out,
    output reg valid
);

    reg [3:0] state;
    reg [3:0] bit_cnt;
    reg sda_out;
    reg sda_oe;
    reg [7:0] shift_reg;
    reg [6:0] addr_rcv;

    assign sda = (sda_oe) ? sda_out : 1'bz;

    localparam IDLE = 4'd0,
               ADDR = 4'd1,
               ACK1 = 4'd2,
               DATA = 4'd3,
               ACK2 = 4'd4,
               DONE = 4'd5;

    always @(posedge clk or posedge rst) begin
        if (rst) begin
            state <= IDLE;
            sda_oe <= 0;
            sda_out <= 1;
            data_out <= 0;
            valid <= 0;
            bit_cnt <= 0;
        end else begin
            case (state)
                IDLE: begin
                    valid <= 0;
                    if (sda == 0 && scl == 1) begin // detect START
                        state <= ADDR;
                        bit_cnt <= 6;
                    end
                end
                ADDR: begin
                    if (scl == 1) begin
                        addr_rcv[bit_cnt] <= sda;
                        if (bit_cnt == 0) state <= ACK1;
                        else bit_cnt <= bit_cnt - 1;
                    end
                end
                ACK1: begin
                    if (addr_rcv == my_addr) begin
                        sda_oe <= 1;
                        sda_out <= 0; // ACK
                        state <= DATA;
                        bit_cnt <= 7;
                        sda_oe <= 0;
                    end else state <= IDLE;
                end
                DATA: begin
                    if (scl == 1) begin
                        shift_reg[bit_cnt] <= sda;
                        if (bit_cnt == 0) state <= ACK2;
                        else bit_cnt <= bit_cnt - 1;
                    end
                end
                ACK2: begin
                    sda_oe <= 1;
                    sda_out <= 0;
                    data_out <= shift_reg;
                    valid <= 1;
                    state <= DONE;
                end
                DONE: begin
                    sda_oe <= 0;
                    state <= IDLE;
                end
            endcase
        end
    end
endmodule
